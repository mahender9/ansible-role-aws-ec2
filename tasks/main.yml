---
- debug: var=aws_access_key
- debug: var=aws_secret_key

- set_fact: # Get current inventory name in order to add new EC2 host to the proper inventory
    inventory: "{{ inventory_file.split('/') | max }}"

- debug: msg="Loading {{ inventory }} inventory"

- ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    instance_tags:
      Name: "{{ environment_name }}{{ '-' + item.instance_prefix if item.instance_prefix != '' else '' }}{{ '-' + enviroment_prefix if enviroment_prefix != '' else '' }}"
      Role: "{{ item.roles|join(',') }}"
      Vars: "{{ item.extra_vars }}"
    instance_type: "{{ item.instance_type|default(__aws_instance_type) }}"
    exact_count: "{{ item.instances }}"
    count_tag:
      Name: "{{ environment_name }}{{ '-' + item.instance_prefix if item.instance_prefix != '' else '' }}{{ '-' + enviroment_prefix if enviroment_prefix != '' else '' }}"
      Role: "{{ item.roles|join(',') }}"
      Vars: "{{ item.extra_vars }}"
    volumes: "{{ item.volumes }}"
    region: "{{ item.region|default(__aws_region) }}"
    group: "{{ item.security_group|default(__aws_security_group) }}"
    image: "{{ item.image_AMI|default(__aws_image_AMI) }}"
    assign_public_ip: yes
    vpc_subnet_id: "{{ item.subnet_id|default(__aws_subnet_id) }}"
    key_name: "{{ item.public_key_name|default(__aws_public_key_name) }}"
    wait: true
  register: ec2_result
  with_items: "{{ aws_hosts }}"
  when:
    - aws_hosts is defined
    - (aws_access_key is defined and aws_secret_key is defined)
    - (aws_ec2_provision is defined and aws_ec2_provision == True)

- set_fact:
    ec2_results: "{{ ec2_result.results | map(attribute='tagged_instances') | list }}"
  when:
    - ec2_result is defined


- debug: var=ec2_result
- debug: var=ec2_results


- name: Set the new host inventory
  add_host: hostname="{{ item.public_dns_name }}"
            ansible_ssh_host="{{ item.public_ip }}"
            ansible_ssh_private_key_file="~/.ssh/{{ item.key_name }}.pem"
            groupname="{{ inventory }}"
            role="{{ item.tags.Role }}"
            {{ item.tags.Vars }}
  with_items: "{{ ec2_results }}"
  when:
    - ec2_results is defined


- name: Waiting for new instance(s) to being ready
  local_action: wait_for host="{{ item.public_ip }}" port=22 search_regex=OpenSSH delay=2
  sudo: False
  register: wait_result
  with_items: "{{ ec2_results }}"
  when:
    - ec2_results is defined


- debug: var=wait_result
- debug: msg={{ item }}
  with_inventory_hostnames: all
