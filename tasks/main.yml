---
- debug: var=aws_access_key
- debug: var=aws_secret_key

- set_fact: # Get current inventory name in order to add new EC2 host to the proper inventory
    inventory: "{{ inventory_file.split('/') | max }}"

- debug: msg="Loading inventory {{ inventory }}"

#- stat: path=vars/ec2_hosts.yml
#  register: new_instances
#
#- debug: var=new_instances

#- include_vars: ../vars/ec2_hosts.yml
#  when: new_instances.stat.exists
#
#- debug: var=item.aws_volumes[0].volume_size
#  with_items: "{{ aws_hosts }}"

- ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    instance_tags:
      Name: "{{ item.aws_instance_name }}{{ '-' + inventory if aws_inventory_tag == True }}"
      Prefix: "{{ item.aws_roles|join(',') }}"
    instance_type: "{{ item.aws_instance_type }}"
    exact_count: "{{ item.aws_instances }}"
    count_tag:
      Name: "{{ item.aws_instance_name }}{{ '-' + inventory if aws_inventory_tag == True }}"
      Prefix: "{{ item.aws_roles|join(',') }}"
    volumes: "{{ item.aws_volumes }}"
    region: "{{ item.aws_region }}"
    group: "{{ item.aws_security_group }}"
    image: "{{ item.aws_image_AMI }}"
    assign_public_ip: yes
    vpc_subnet_id: "{{ item.aws_subnet_id }}"
    key_name: "{{ item.aws_public_key_name }}"
    wait: true
  register: ec2_result
  with_items: "{{ aws_hosts }}"
  when:
    - aws_hosts is defined
    - (aws_access_key is defined) and (aws_secret_key is defined)
    - (aws_ec2_provision is defined) and (aws_ec2_provision == True)

- set_fact:
    ec2_results: "{{ ec2_result.results | map(attribute='tagged_instances') | list }}"
  when:
    - ec2_result is defined

- debug: var=ec2_result
- debug: var=ec2_results

- name: Set the new host inventory
  add_host: hostname="{{ item.public_dns_name }}"
            ansible_ssh_host="{{ item.public_ip }}"
            ansible_ssh_private_key_file="~/.ssh/{{ item.key_name }}.pem"
            groupname="{{ inventory }}"
            rol="{{ item.tags.Prefix }}"
  with_items: "{{ ec2_results }}"
  when:
    - ec2_results is defined

- name: Waiting for new instance(s) to being ready
  local_action: wait_for host="{{ item.public_ip }}" port=22 search_regex=OpenSSH delay=2
  sudo: False
  register: wait_result
  with_items: "{{ ec2_results }}"
  when:
    - ec2_results is defined

- debug: var=wait_result
- debug: msg={{ item }}
  with_inventory_hostnames: all
